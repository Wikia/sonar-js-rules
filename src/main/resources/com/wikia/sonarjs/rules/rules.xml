<?xml version="1.0" encoding="UTF-8" ?>
<rules xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="rules.xsd">
	<rule>
		<key>ArrowFunctions</key>
		<name>Arrow functions cannot be used in ES5</name>
		<description><![CDATA[
			<p>
				Arrow functions are an ES6 feature.
				They are not part of the ES5 specification, and are unsupported by many browsers.
				An anonymous function should be used instead.
			</p>
			<h2>Noncompliant Code Example</h2>
			<pre>
				[].forEach(item => console.log);
			</pre>
			<h2>Compliant Solution</h2>
			<pre>
				[].forEach(function(item){
					console.log(item);
				});
			</pre>
		]]></description>

		<type>BUG</type>
		<severity>BLOCKER</severity>
		<tag>es6</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>Classes</key>
		<name>Classes cannot be used in ES5</name>
		<description><![CDATA[
			<p>
				Class declarations are an ES6 feature.
				They are not part of the ES5 specification, and are unsupported by many browsers.
				A function or an object literal should be used instead.
			</p>
			<h2>Noncompliant Code Example</h2>
			<pre>
				class Clazz {
					constructor() {
						this.bar = 5;
					}
					foo() {}
				}
			</pre>
			<h2>Compliant Solution</h2>
			<pre>
				function Clazz() {
					this.bar = 5;
				}

				Clazz.prototype.foo = function() {};
			</pre>
		]]></description>

		<type>BUG</type>
		<severity>BLOCKER</severity>
		<tag>es6</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ConstLet</key>
		<name>Variables cannot be declared with const or let in ES5</name>
		<description><![CDATA[
			<p>
				<code>const</code> and <code>let</code> variable declarations are an ES6 feature.
				They are not part of the ES5 specification, and are unsupported by many browsers.
				A normal <code>var</code> declaration should be used instead.
			</p>
			<h2>Noncompliant Code Example</h2>
			<pre>
				const CONST = 3.14;

				function foo() {
					let a = 5;
				}
			</pre>
			<h2>Compliant Solution</h2>
			<pre>
				var CONST = 3.14;

				function foo() {
					var b = 5;
				}
			</pre>
		]]></description>

		<type>BUG</type>
		<severity>BLOCKER</severity>
		<tag>es6</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>Generators</key>
		<name>Generators cannot be used in ES5</name>
		<description><![CDATA[
			<p>
				Generators are an ES6 feature.
				They are not part of the ES5 specification, and are unsupported by many browsers.
				Code using them should be refactored to use a normal function instead.
			</p>
		]]></description>

		<type>BUG</type>
		<severity>BLOCKER</severity>
		<tag>es6</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>Iterators</key>
		<name>Iterators cannot be used in ES5"</name>
		<description><![CDATA[
			<p>
				Iterators are an ES6 feature.
				They are not part of the ES5 specification, and are unsupported by many browsers.
				A <code>for-in</code> loop should be used to iterate over objects, while a <code>for/while</code> loop
				or <code>Array.forEach</code> should be used to iterate over arrays.
			</p>
			<h2>Noncompliant Code Example</h2>
			<pre>
				let a = [];

				for (let item of a) {

				}
			</pre>
			<h2>Compliant Solution</h2>
			<pre>
				var a = [];

				a.forEach(function(item) {

				});
			</pre>
		]]></description>

		<type>BUG</type>
		<severity>BLOCKER</severity>
		<tag>es6</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>Literals</key>
		<name>Binary and octal numeric literals cannot be used in ES5</name>
		<description><![CDATA[
			<p>
				Binary and octal numeric literals are an ES6 feature.
				They are not part of the ES5 specification, and are unsupported by many browsers.
				A decimal or hexadecimal numeric literal should be used instead.
			</p>
			<h2>Noncompliant Code Example</h2>
			<pre>
				let
					a = 0b0110,
					b = 0o01;
			</pre>
			<h2>Compliant Solution</h2>
			<pre>
				var
					a = 0x5,
					b = 1;
			</pre>
		]]></description>

		<type>BUG</type>
		<severity>BLOCKER</severity>
		<tag>es6</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>PropertyShorthands</key>
		<name>Shorthand object properties cannot be used in ES5</name>
		<description><![CDATA[
			<p>
				Object property shorthands and variable keys are an ES6 feature.
				They are not part of the ES5 specification, and are unsupported by many browsers.
				Pair properties with strong literal or identifier keys should be used instead.
			</p>
			<h2>Noncompliant Code Example</h2>
			<pre>
				let o = {
					x, y
					z() {},
				};
			</pre>
			<h2>Compliant Solution</h2>
			<pre>
				var o = {
					x: x,
					y: y,
					z: function() {}
				};
			</pre>
		]]></description>

		<type>BUG</type>
		<severity>BLOCKER</severity>
		<tag>es6</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>StringInterpolation</key>
		<name>Template strings cannot be used in ES5</name>
		<description><![CDATA[
			<p>
				Template string are an ES6 feature.
				They are not part of the ES5 specification, and are unsupported by many browsers.
				String concatenation should be used instead.
			</p>
			<h2>Noncompliant Code Example</h2>
			<pre>
				let a = 8,
					b = `a is ${a}`;
			</pre>
			<h2>Compliant Solution</h2>
			<pre>
				var a = 8,
					b = 'a is ' + a;
			</pre>
		]]></description>

		<type>BUG</type>
		<severity>BLOCKER</severity>
		<tag>es6</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
</rules>